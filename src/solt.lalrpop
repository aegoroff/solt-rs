use crate::{OpCode};

grammar;

pub Solution = <Line> <Line*>;

Line = {
    HeaderLine,
};

HeaderLine = {
    FirstLine,
    Version,
    Comment,
};

FirstLine : OpCode = <Word> <Word*> <Comma> <Word*> <DigitOrDot> => OpCode::FirstLine;

Version : OpCode = {
    <id:Identifier> Eq <r:Rvalue> => {
        let name = match id {
            OpCode::Identifier(s) => s,
            _ => String::new(),
        };

        let val = match r {
            OpCode::DigitOrDot(s) => s,
            _ => String::new(),
        };

        OpCode::Version(name, val)
    },
};

Rvalue : OpCode = {
    Identifier,
    DigitOrDot,
};

Word = {
    Identifier,
};

Comment : OpCode = {
    r"#[^\n]*" => OpCode::Comment(<>.to_string()),
};

Comma: OpCode = {
    "," => OpCode::Comma,
};

Eq: OpCode = {
    "=" => OpCode::Eq,
};

DigitOrDot: OpCode = {
    r"[.0-9]+" => OpCode::DigitOrDot(<>.to_string()),
};

Identifier: OpCode = r"[a-zA-Z]+" => OpCode::Identifier(<>.to_string());