
use crate::ast::{Expr};
use crate::lex::{Tok};

grammar<'input>(input: &'input str);

pub Solution = <FirstLine> <Line*>;

Line = {
    <HeaderLine>,
    <ProjectBegin>,
    <ProjectEnd>,
    <ProjectSectionBegin>,
    <ProjectSectionContent>,
    <ProjectSectionEnd>,
};

HeaderLine = {
    <Comment>,
    <Version>,
};

FirstLine : Expr<'input> = <Identifier> <Identifier*> "comma" <Identifier*> <DigitOrDot> => Expr::FirstLine;

Version : Expr<'input> = <id:Identifier> "eq" <r:DigitOrDot> => Expr::Version(Box::new(id),Box::new(r));

ProjectBegin : Expr<'input> = {
    <s:Identifier> <t:ProjectType> "eq" <n:Str> "comma" <p:Str> "comma" <id:Str> => {
        Expr::ProjectBegin(Box::new(t),Box::new(n),Box::new(p),Box::new(id))
    },
};

ProjectSectionBegin : Expr<'input> = {
    <s:Identifier> "(" <name:Identifier> ")" "eq" <stage:Identifier> => {
        Expr::ProjectSectionBegin(Box::new(name),Box::new(stage))
    },
};

ProjectEnd : Expr<'input> = <Identifier> => Expr::ProjectEnd;

ProjectSectionEnd : Expr<'input> = {
    <Identifier> => Expr::ProjectSectionEnd,
};

ProjectSectionContent : Expr<'input> = {
    <k:Guid> "eq" <v:Guid> => {
        Expr::ProjectSectionContent(Box::new(k), Box::new(v))
    },
};

ProjectType : Expr<'input> = "(" <g:Str> ")" => Expr::ProjectType(Box::new(g));

Rvalue : Expr<'input> = {
    <Identifier>,
    <DigitOrDot>,
};

Comment : Expr<'input> = "comment" => Expr::Comment(<>);

DigitOrDot: Expr<'input> = "digit_and_dot" => Expr::DigitOrDot(<>);

Guid: Expr<'input> = "guid" => Expr::Guid(<>);

Identifier: Expr<'input> = "id" => Expr::Identifier(<>);

Str: Expr<'input> = "str" => Expr::Str(<>);

extern {
    type Location = usize;
    type Error = ();

    enum Tok<'input> {
        "comment" => Tok::Comment(<&'input str>),
        "str" => Tok::Str(<&'input str>),
        "section_key" => Tok::SectionKey(<&'input str>),
        "section_value" => Tok::SectionValue(<&'input str>),
        "guid" => Tok::Guid(<&'input str>),
        "id" => Tok::Id(<&'input str>),
        "digit_and_dot" => Tok::DigitsAndDots(<&'input str>),
        "comma" => Tok::Comma,
        "eq" => Tok::Eq,
        "(" => Tok::ParenOpen,
        ")" => Tok::ParenClose,
    }
}